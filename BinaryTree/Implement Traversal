

import java.util.LinkedList;
import java.util.Queue;

class Node{
    int data;
    Node left, right;
    Node(int d ){
        data = d;
        left = right = null;
    }
}
public class implTrav {
    static void inOrderDFS(Node node ){
        if(node == null) return ;
        inOrderDFS(node.left);
        System.out.print(node.data +" ");
        inOrderDFS(node.right);
        }
        //Pre-order DFS
        static void preOrderDFS(Node node){
            if (node== null) return;
            System.out.print(node.data + " ");
            preOrderDFS(node.left);
            preOrderDFS(node.right);
        }
        
        // Post-order DFS
        static void postOrderDFS(Node node){
            if(node == null) return;
            postOrderDFS(node.left);
            postOrderDFS(node.right);
            System.out.print(node.data +" ");
        }

        // BFS
        static void BFS (Node root){
            if (root == null) return;
            Queue<Node> queue = new LinkedList<>();
            queue.add(root);
            while(!queue.isEmpty()){
                Node node = queue.poll();
                System.out.print(node.data +" ");
                if(node.left != null)queue.add(node.left);
                if(node.right != null)queue.add(node.right);
            }
        
        }
        public static void main(String [] args){
            Node root = new Node(2);
            root.left = new Node(3);
            root.right= new Node(4);
            root.left.left = new Node(5);

           System.out.print("In-order DFS: ");
           inOrderDFS(root);
           System.out.print("\nPre-Order DFS: ");
           preOrderDFS(root);
           System.out.print("\nPost-Order DFS: ");
           postOrderDFS(root);
           System.out.println("\nLevel order: ");
           BFS(root);

        }
        
}



